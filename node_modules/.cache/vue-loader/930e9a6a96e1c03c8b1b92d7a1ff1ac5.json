{"remainingRequest":"/home/runner/work/U3_Fundamentos_psicologia/U3_Fundamentos_psicologia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Fundamentos_psicologia/U3_Fundamentos_psicologia/src/views/curso/Tema1.vue?vue&type=template&id=154e1880&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Fundamentos_psicologia/U3_Fundamentos_psicologia/src/views/curso/Tema1.vue","mtime":1746509588053},{"path":"/home/runner/work/U3_Fundamentos_psicologia/U3_Fundamentos_psicologia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_psicologia/U3_Fundamentos_psicologia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_psicologia/U3_Fundamentos_psicologia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_psicologia/U3_Fundamentos_psicologia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Fundamentos_psicologia/U3_Fundamentos_psicologia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}